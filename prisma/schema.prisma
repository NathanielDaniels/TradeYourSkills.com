generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String        @id @default(cuid())
  name                 String?
  email                String        @unique
  username             String?       @unique
  image                String?
  avatar               String?
  bio                  String?
  location             String?
  city                 String?
  state                String?
  country              String?
  profileVisible       Boolean       @default(true)
  isPro                Boolean       @default(false)
  isVerified           Boolean       @default(false)
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  emailVerified        DateTime?
  skills               Skill[]
  listings             Listing[]
  messagesSent         Message[]     @relation("FromMessages")
  messagesReceived     Message[]     @relation("ToMessages")
  swapRequestsReceived SwapRequest[] @relation("Recipient")
  swapRequests         SwapRequest[] @relation("Requester")
  accounts             Account[]
  sessions             Session[]
}

model Message {
  id            String       @id @default(cuid())
  content       String       @db.VarChar(2000)
  isBlocked     Boolean      @default(false)
  createdAt     DateTime     @default(now())
  read          Boolean      @default(false)
  fromUserId    String
  toUserId      String
  swapRequestId String?
  fromUser      User         @relation("FromMessages", fields: [fromUserId], references: [id], onDelete: Cascade)
  swapRequest   SwapRequest? @relation(fields: [swapRequestId], references: [id], onDelete: SetNull)
  toUser        User         @relation("ToMessages", fields: [toUserId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  access_token      String?
  refresh_token     String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Listing {
  id                    String        @id @default(cuid())
  title                 String
  description           String
  isActive              Boolean       @default(true)
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  location              String?
  availability          String?
  userId                String
  skillId               String?
  skill                 Skill?        @relation(fields: [skillId], references: [id], onDelete: SetNull)
  user                  User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  offeredSwapRequests   SwapRequest[] @relation("OfferedListing")
  requestedSwapRequests SwapRequest[] @relation("RequestedListing")
}

model SwapRequest {
  id                 String     @id @default(cuid())
  message            String
  responseMessage    String? 
  status             SwapStatus @default(pending)
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  requesterId        String
  recipientId        String
  offeredListingId   String?
  requestedListingId String?
  messages           Message[]
  offeredListing     Listing?   @relation("OfferedListing", fields: [offeredListingId], references: [id], onDelete: SetNull)
  recipient          User       @relation("Recipient", fields: [recipientId], references: [id], onDelete: Cascade)
  requestedListing   Listing?   @relation("RequestedListing", fields: [requestedListingId], references: [id], onDelete: SetNull)
  requester          User       @relation("Requester", fields: [requesterId], references: [id], onDelete: Cascade)
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Skill {
  id          String    @id @default(cuid())
  name        String
  description String?
  category    String?
  experience  Int?
  createdAt   DateTime  @default(now())
  order       Int      @default(0)
  userId      String
  listings    Listing[]
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum SwapStatus {
  pending
  accepted
  declined
  cancelled
}
